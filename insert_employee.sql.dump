DO $$  
DECLARE
	-- количество
	count_levelAuthority INT;
	count_employees INT;
	count_keys INT;
	count_section INT;
	
	i INTEGER;
	offset_section INT;
	owner_uuid UUID;
	sets_uuid UUID;
	circuit_uuid UUID;
	section_uuid UUID;
	section_name TEXT;
	auth_uuid UUID;
	iname text;
	auth_name text;
	emp_arr_name TEXT ARRAY;
	emp_name TEXT;
	 
BEGIN
	-- устанавливаем первоначальные значения для количества записей
	-- уровни доступа
	count_levelAuthority := 500;
	count_employees := 50000;
	count_keys := 4;
	-- разделы
	count_section := 50000;
	
	
	i := 0;
	offset_section := 0;

		
	-- генерируем уровни доступа
   FOR counterA IN 1..count_levelAuthority LOOP
   		INSERT INTO "InstanceX"  ("IUUID", "IName", "IType", "IConcept") 
		VALUES (uuid_generate_v4(), 'Уровень доступа_' || cast(counterA as TEXT), '00000000-0000-0000-0000-000003000000', 300000);
   END LOOP;
COMMIT;
	emp_arr_name := '{"Иванов", "Петров", "Сидоров", "Синицын"}'; 
	-- генерируем сотрудников
   FOR counter IN 1..count_employees LOOP
   emp_name := (SELECT (emp_arr_name)[FLOOR(random() * 4 + 1)]);
       INSERT INTO "InstanceX" ("IUUID", "IParent", "IName", "IConcept", "IType" )
            VALUES (uuid_generate_v4(), '00000000-0000-0000-0000-000000008011',  emp_name || '_' || CAST(counter AS TEXT),  
                    8200, '00000000-0000-0000-0000-000000008001')
                     RETURNING "IUUID" INTO owner_uuid;
COMMIT;               
       -- генерируем брелки(ключи) по 5 на сотрудника, назначем ему уровень доступа по random
       FOR keys IN 1..count_keys LOOP
            INSERT INTO "InstanceX"  ("IUUID", "IName", "IType", "IINT1", "IUUID1")
            VALUES (uuid_generate_v4(),  'Брелок_' || CAST((counter*10)+keys AS TEXT),
            '00000000-0000-0000-0000-000002000001', (counter*10) + keys, (SELECT "IUUID" FROM  "InstanceX" WHERE "IConcept" = 300000 ORDER BY random() limit 1))
            RETURNING "IUUID" INTO sets_uuid;
COMMIT;           
            -- связываем сгенерированный брелок и сотрудника (пока сколько сотрудников, столько связей)
            INSERT INTO "ISetX" ("ISUUID", "ISetName", "ISOWNER", "ISUUID1", "ISConcept")
            VALUES (uuid_generate_v4(), 'Брелок ' || CAST((counter*10) + keys AS TEXT) || ' на ' || (SELECT "IName" FROM "InstanceX" WHERE "IUUID" = owner_uuid), owner_uuid, sets_uuid, 400200);                                                          
       END LOOP;
    END LOOP;
    
-- генерируем разделы
    FOR counterS IN 1..count_section LOOP
        INSERT INTO "InstanceX"  ("IUUID", "IName", "IType")
        VALUES (uuid_generate_v4(),  'Раздел_' || CAST(counterS AS TEXT), '00000000-0000-0000-0001-000000007001')
        RETURNING "IUUID" INTO section_uuid;
        -- генерируем шлейфы на каждый раздел
COMMIT;        
        FOR counterС IN 1..2 LOOP
            INSERT INTO "InstanceX"  ("IUUID", "IName", "IType")
            VALUES (uuid_generate_v4(),  'Шлейф_' || CAST(counterС AS TEXT), '24227921-6d86-4bed-9654-310a5e28b408')
            RETURNING "IUUID" INTO circuit_uuid;
            -- связываем разделы (владелец) с шлейфами (набор шлейфов для раздела)  
            INSERT INTO "ISetX" ("ISUUID", "ISetName", "ISOWNER", "ISUUID1", "ISConcept")
            VALUES (uuid_generate_v4(), 'Шлейф_' || CAST(counterС AS TEXT) || ' на Разделе_' ||  CAST(counterS AS TEXT), section_uuid, circuit_uuid, 500100);
           
        END LOOP;  
    END LOOP;
                                                             
    -- связь УД --> Раздел
    -- забираем все уровни доступа, идем по ним циклом
    FOR auth_uuid, auth_name IN
        SELECT "IUUID", "IName" FROM "InstanceX" WHERE "IConcept" = 300000
        LOOP
            -- забираем разделы в количестве 10 с offset
            FOR section_uuid, section_name IN
                SELECT "IUUID", "IName" FROM  "InstanceX" WHERE "IType" = '00000000-0000-0000-0001-000000007001' OFFSET offset_section  LIMIT 10
                LOOP
                    INSERT INTO "ISetX" ("ISUUID", "ISetName", "ISOWNER", "ISUUID1", "ISConcept")
                    VALUES (uuid_generate_v4(),  section_name || ' на ' || auth_name , auth_uuid, section_uuid, 400100);
                END LOOP;
                offset_section := offset_section + 10;
COMMIT;  
        END LOOP;    
COMMIT;
END; 
$$ LANGUAGE plpgsql;